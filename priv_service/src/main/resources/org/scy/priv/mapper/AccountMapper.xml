<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.scy.priv.mapper.AccountMapper">

    <!-- getById -->
    <select id="getById" resultType="AccountModel">
        select * from `account` where id = #{id} and state > 0
    </select>

    <!-- getByCode -->
    <select id="getByCode" resultType="AccountModel">
        select * from `account` where code = #{code} and state > 0 limit 1
    </select>

    <!-- getByName -->
    <select id="getByName" resultType="AccountModel">
        select * from `account` where name = #{name} and state > 0 limit 1
    </select>

    <!-- getByMobile -->
    <select id="getByMobile" resultType="AccountModel">
        select * from `account` where mobile = #{mobile} and state > 0 limit 1
    </select>

    <!-- getByEmail -->
    <select id="getByEmail" resultType="AccountModel">
        select * from `account` where email = #{email} and state > 0 limit 1
    </select>

    <!-- add -->
    <insert id="add" parameterType="AccountModel" useGeneratedKeys="true" keyProperty="id">
        insert into `account` (name, code, secret, mobile, email, type, ownerId, state, creatorId, createTime)
        values (#{name}, #{code}, #{secret}, #{mobile}, #{email}, #{type}, #{ownerId},
            #{state}, #{creatorId}, #{createTime})
    </insert>

    <!-- update -->
    <update id="update" parameterType="AccountModel">
        update `account`
        set name = #{name}, code = #{code}, mobile = #{mobile}, email = #{email},
            secret = #{secret}, type = ${type}, updatorId = #{updatorId}, updateTime = #{updateTime}
        where id = ${id}
    </update>

    <!-- delete -->
    <update id="delete" parameterType="AccountModel">
        update `account` set state = 0 where id = #{id}
    </update>

    <!-- find -->
    <select id="find" parameterType="org.scy.common.ds.query.Selector" resultType="AccountModel">
        select * from `account` ${where} ${group} ${order} ${limit}
    </select>

    <!-- countFind -->
    <select id="countFind" parameterType="org.scy.common.ds.query.Selector" resultType="Integer">
        select count(id) as count from `account` ${where} ${group}
    </select>

    <!-- updateSecret -->
    <update id="updateSecret" parameterType="AccountModel">
        update `account`
        set secret = #{secret}, updatorId = #{updatorId}, updateTime = #{updateTime}
        where id = #{id}
    </update>

    <!-- updateState -->
    <update id="updateState" parameterType="AccountModel">
        update `account`
        set state = #{state}, updatorId = #{updatorId}, updateTime = #{updateTime}
        where id = #{id}
    </update>

</mapper>